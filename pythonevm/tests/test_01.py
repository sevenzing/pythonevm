import sys
import pathlib
script_dir = pathlib.Path(__file__).parent.parent.parent.resolve()
sys.path.append(str(script_dir.absolute()))

from pythonevm.vm import VM
import pytest

def generateInput(params):
    calldata = ''
    for i in params:
        calldata += hex(i)[2:].zfill(64)[-64:]
    message = bytearray(bytes.fromhex(calldata))
    return message

def test_add_uint8():
    '''
    Testing adding 2 numbers from 0 to 255
    '''

    vm = VM()
    a, b = 36, 83
    code = bytearray(bytes.fromhex(
        f'60{hex(a)[2:].zfill(2)}'\
        f'60{hex(b)[2:].zfill(2)}01'
        ))
    
    with pytest.raises(EOFError):
        vm.execute(code, msg=bytearray())
    
    assert vm.stack.popTop() == a + b

def test_add_uint256():
    '''
    Testing adding 2 numbers
    '''

    vm = VM()
    a, b = 16**29 + 123, 16**30 + 123
    code = bytearray(bytes.fromhex(
        f'7f{hex(a)[2:].zfill(64)}'\
        f'7f{hex(b)[2:].zfill(64)}01'
        ))
    
    with pytest.raises(EOFError):
        vm.execute(code, msg=bytearray())
    
    assert vm.stack.popTop() == a + b

def test_mul_uint8():
    '''
    Testing multiplying 2 numbers from 0 to 255
    '''

    vm = VM()
    a, b = 19, 13
    code = bytearray(bytes.fromhex(
        f'60{hex(a)[2:].zfill(2)}'\
        f'60{hex(b)[2:].zfill(2)}02'
        ))
    
    with pytest.raises(EOFError):
        vm.execute(code, msg=bytearray())
    
    assert vm.stack.popTop() == a * b


def test_mul_uint256():
    '''
    Testing multiplying 2 numbers
    '''

    vm = VM()
    a, b = 16**10 + 2, 16**11 + 321 
    code = bytearray(bytes.fromhex(
        f'7f{hex(a)[2:].zfill(64)}'\
        f'7f{hex(b)[2:].zfill(64)}02'
        ))
    
    with pytest.raises(EOFError):
        vm.execute(code, msg=bytearray())
    
    assert vm.stack.popTop() == a * b

def test_stop():
    vm = VM()
    code = bytearray(bytes.fromhex('600160020100'))
    vm.execute(code, msg=bytearray())
    assert vm.stack.popTop() == 3

def test_jump_01():
    vm = VM()
    code = bytearray(bytes.fromhex('6100406100005261000080610040526100805261000061006052610492565b61000051610000516100606100005161002001516100200201015261000051610060610000516100200151610020020101610000526100005161004001526100026100005161002001526100005161006001526100005161008001526100005161008001516100005161008001516100005161006001519004610000516100600151029003610000516100400151610000515161000052565b6100005161000051610060610000516100200151610020020101526100005161006061000051610020015161002002010161000052610000516100400152610005610000516100200152610000516100600152610000516100800152610000516100A00152610000516100C0015161000051610060015161000101610000516100C00152610000516100A0015161000014610151576101A8565b610000516100C001516100005161008001511061016D57610188565b610001610000516100400151610000515161000052566101A3565b610000610000516100400151610000515161000052566101A3565b6101E3565b610000516100A00151610001146101BE576101D9565b610000610000516100400151610000515161000052566101DE565b6101DE565b6101E3565b610000516100E00151610000516100A001516100029004610000516100E00152610000516100A0015161000261021761001E565b610000146102245761029B565b610000516100C00151610000516100800151106102405761025B565b61000161000051610040015161000051516100005256610296565b610000516100E00151610000516100800151610000516100C0015161027E6100B7565b61000051610040015161000051516100005256610296565b6102D0565b610000516100E001516100005161008001516100006102B86100B7565b610000516100400151610000515161000052566102D0565b610000516100400151610000515161000052565b61000051610000516100606100005161002001516100200201015261000051610060610000516100200151610020020101610000526100005161004001526100036100005161002001526100005161006001526100005161006001516100001461034D57610368565b6100006100005161004001516100005151610000525661036D565b61036D565b610000516100800151610000610000516100800152610000516100A00151610000516100600151610000516100A001525b610000516100800151610000516100A00151116103BA57610413565b61000051610080015161000051610080015161000A02610000516100A0015161000A6103E461001E565b01610000516100800152610000516100A00151610000516100A0015161000A9004610000516100A0015261039E565b610000516100800151610000516100A001511461000051610080015161000A9004610000516100A00151141761044857610463565b6100016100005161004001516100005151610000525661047E565b6100006100005161004001516100005151610000525661047E565b610000516100400151610000515161000052565b6100026100005161002001526100005161006001516100006100200235610000516100600152610000516100800151610000610000516100800152610000516100600151610000146104E357610515565b610000516100800151610001610020023561000261002002356100006105076100B7565b61000051610080015261055C565b6100005161006001516100011461052B57610552565b61000051610080015161000161002002356105446102E4565b610000516100800152610557565b610557565b61055C565b61000051610080015161000052610020610000f3'))
    msg = generateInput([0, int('10000000010', 2), 8])
    result = vm.execute(code, msg)

    assert int(result.hex(), 16) == 0
